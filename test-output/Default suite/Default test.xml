<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="20" hostname="DESKTOP-L5NGBOT" failures="0" tests="56" name="Default test" time="1.009" errors="0" timestamp="2024-01-26T19:34:46 IST">
  <testcase classname="Utilites.baseTest" name="@BeforeSuite startTest" time="0.04">
    <failure type="java.lang.Error" message="Unresolved compilation problems: 
	The constructor ExtentReports(String, boolean) is undefined
	The method startTest(String) is undefined for the type ExtentReports
	reporter cannot be resolved
	extentReports cannot be resolved
	extentReports cannot be resolved
	extent cannot be resolved
	extentReports cannot be resolved to a variable
">
      <![CDATA[java.lang.Error: Unresolved compilation problems: 
The constructor ExtentReports(String, boolean) is undefined
The method startTest(String) is undefined for the type ExtentReports
reporter cannot be resolved
extentReports cannot be resolved
extentReports cannot be resolved
extent cannot be resolved
extentReports cannot be resolved to a variable

at Utilites.baseTest.startTest(baseTest.java:29)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:393)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:326)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:382)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeSuite startTest -->
  <testcase classname="test.java.platform.api.Payloads" name="@BeforeSuite extractEnviromentURL" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeSuite extractEnviromentURL -->
  <testcase classname="TestCases.TC2" name="@BeforeTest updatebody" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeTest updatebody -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="@AfterMethod afterMethodTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodTenantOnboarding -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="@AfterMethod afterMethodKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodKnowledgeCollection -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="@AfterMethod afterMethodinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="@AfterMethod afterMethodSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodSearchSkill -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="createUserinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- createUserinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="createAdminAppinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- createAdminAppinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="genereateJWTtokeninTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokeninTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="cloningSmapleBotinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- cloningSmapleBotinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="clonedBotSetupinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- clonedBotSetupinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="createbuilderAppnforUBinTenantOnboarding" time="0.001">
    <skipped/>
  </testcase> <!-- createbuilderAppnforUBinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="enableRTMforUBbuilderAPPinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- enableRTMforUBbuilderAPPinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="genereateJWTtokenUB_BuilderAppinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokenUB_BuilderAppinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="uploadFileinTenantOnboarding" time="0.001">
    <skipped/>
  </testcase> <!-- uploadFileinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="importBotinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- importBotinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="importBotStatusinTenantOnboarding" time="0.001">
    <skipped/>
  </testcase> <!-- importBotStatusinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="createbuilderAppNONAdmininTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- createbuilderAppNONAdmininTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="enableRTMinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- enableRTMinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="genereateJWTtokenbuilderappinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokenbuilderappinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="publishbotStandardBotinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- publishbotStandardBotinTenantOnboarding -->
  <testcase classname="test.java.platform.api.TenantOnboarding" name="linkChildBotinTenantOnboarding" time="0.0">
    <skipped/>
  </testcase> <!-- linkChildBotinTenantOnboarding -->
  <testcase classname="TestCases.TC3" name="getUpdatedPetId" time="0.0">
    <skipped/>
  </testcase> <!-- getUpdatedPetId -->
  <testcase classname="TestCases.TC2" name="putRequest" time="0.0">
    <skipped/>
  </testcase> <!-- putRequest -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="createUserinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- createUserinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="createAdminAppinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- createAdminAppinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="genereateJWTtokeninKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokeninKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="cloningSmapleBotinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- cloningSmapleBotinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="clonedBotSetupinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- clonedBotSetupinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="createbuilderAppnonAdmininKnowledgeCollection" time="0.001">
    <skipped/>
  </testcase> <!-- createbuilderAppnonAdmininKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="enableRTMinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- enableRTMinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="getRoleinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- getRoleinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="AddingDeveloperasOwnerinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- AddingDeveloperasOwnerinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="ExtractFAQsinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- ExtractFAQsinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="GetQsofExtractinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- GetQsofExtractinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="GetKTofTaskofCollectioninKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- GetKTofTaskofCollectioninKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="AddQstoCollectioninKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- AddQstoCollectioninKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="publishbotinKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- publishbotinKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="GetFAQsCollectioninKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- GetFAQsCollectioninKnowledgeCollection -->
  <testcase classname="test.java.platform.api.KnowledgeCollection" name="GetExtractsofCollectioninKnowledgeCollection" time="0.0">
    <skipped/>
  </testcase> <!-- GetExtractsofCollectioninKnowledgeCollection -->
  <testcase classname="TestCases.TC1" name="getRequest" time="0.0">
    <skipped/>
  </testcase> <!-- getRequest -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="createUserinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- createUserinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="createAdminAppinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- createAdminAppinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="genereateJWTtokeninEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokeninEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="uploadFileinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- uploadFileinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="importBotinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- importBotinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="importBotStatusinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- importBotStatusinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="configuringENVvarinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- configuringENVvarinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="createbuilderAppnonAdmininEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- createbuilderAppnonAdmininEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="enableRTMinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- enableRTMinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="genereateJWTtokenforNonAmdinAppinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokenforNonAmdinAppinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="publishbotinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- publishbotinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="getRoleinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- getRoleinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.EnviromentSetup" name="AddingDeveloperasOwnerinEnvironmentSetup" time="0.0">
    <skipped/>
  </testcase> <!-- AddingDeveloperasOwnerinEnvironmentSetup -->
  <testcase classname="test.java.platform.api.SearchSkill" name="createUserinSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- createUserinSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="createAdminAppinSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- createAdminAppinSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="genereateJWTtokeninSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- genereateJWTtokeninSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="cloningSmapleBotinSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- cloningSmapleBotinSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="clonedBotSetupinSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- clonedBotSetupinSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="configuringENVvarinSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- configuringENVvarinSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="createbuilderAppnonAdmininSearchSkill" time="0.0">
    <skipped/>
  </testcase> <!-- createbuilderAppnonAdmininSearchSkill -->
  <testcase classname="test.java.platform.api.testt" name="sampletest" time="0.0">
    <skipped/>
  </testcase> <!-- sampletest -->
  <testcase classname="test.java.platform.api.SearchSkill" name="getRoleinSearchSkill" time="0.0">
    <ignored/>
  </testcase> <!-- getRoleinSearchSkill -->
  <testcase classname="Utilites.baseTest" name="@AfterSuite endTest" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite endTest -->
  <testcase classname="test.java.platform.api.Payloads" name="@AfterSuite GeerateHTMLReport" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite GeerateHTMLReport -->
  <testcase classname="test.java.platform.api.SearchSkill" name="genereateJWTtokenforNonAmdinAppinSearchSkill" time="0.0">
    <ignored/>
  </testcase> <!-- genereateJWTtokenforNonAmdinAppinSearchSkill -->
  <testcase classname="test.java.platform.api.Payloads" name="@BeforeSuite extractEnviromentURL" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite extractEnviromentURL -->
  <testcase classname="test.java.platform.api.SearchSkill" name="enableWebHookinSearchSkill" time="0.0">
    <ignored/>
  </testcase> <!-- enableWebHookinSearchSkill -->
  <testcase classname="Utilites.baseTest" name="@BeforeSuite startTest" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite startTest -->
  <testcase classname="Utilites.baseTest" name="@AfterSuite endTest" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite endTest -->
  <testcase classname="test.java.platform.api.Payloads" name="@BeforeSuite extractEnviromentURL" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite extractEnviromentURL -->
  <testcase classname="test.java.platform.api.Payloads" name="@BeforeSuite extractEnviromentURL" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite extractEnviromentURL -->
  <testcase classname="Utilites.baseTest" name="@AfterSuite endTest" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite endTest -->
  <testcase classname="test.java.platform.api.SearchSkill" name="triggerWebHookinSearchSkill" time="0.0">
    <ignored/>
  </testcase> <!-- triggerWebHookinSearchSkill -->
  <testcase classname="test.java.platform.api.SearchSkill" name="publishbotinSearchSkill" time="0.0">
    <ignored/>
  </testcase> <!-- publishbotinSearchSkill -->
  <testcase classname="test.java.platform.api.Payloads" name="@AfterSuite GeerateHTMLReport" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite GeerateHTMLReport -->
  <testcase classname="test.java.platform.api.Payloads" name="@BeforeSuite extractEnviromentURL" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite extractEnviromentURL -->
  <testcase classname="Utilites.baseTest" name="@BeforeSuite startTest" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite startTest -->
  <testcase classname="Utilites.baseTest" name="@BeforeSuite startTest" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite startTest -->
  <testcase classname="test.java.platform.api.Payloads" name="@AfterSuite GeerateHTMLReport" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite GeerateHTMLReport -->
  <testcase classname="test.java.platform.api.SearchSkill" name="AddingDeveloperasOwnerinSearchSkill" time="0.0">
    <ignored/>
  </testcase> <!-- AddingDeveloperasOwnerinSearchSkill -->
  <testcase classname="test.java.platform.api.Payloads" name="@AfterSuite GeerateHTMLReport" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite GeerateHTMLReport -->
</testsuite> <!-- Default test -->
